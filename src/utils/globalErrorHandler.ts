// Handler global para erros nÃ£o capturados
export function setupGlobalErrorHandling() {
  // Capturar erros nÃ£o tratados
  window.addEventListener('error', (event) => {
    console.error('Erro global capturado:', event.error)
    
    // Evitar que o erro seja exibido no console do navegador
    event.preventDefault()
    
    // Aqui vocÃª pode enviar o erro para um serviÃ§o de monitoramento
    // como Sentry, LogRocket, etc.
  })

  // Capturar promessas rejeitadas nÃ£o tratadas
  window.addEventListener('unhandledrejection', (event) => {
    console.error('Promessa rejeitada nÃ£o tratada:', event.reason)
    
    // Evitar que o erro seja exibido no console do navegador
    event.preventDefault()
  })

  // Capturar erros de recursos (imagens, scripts, etc.)
  window.addEventListener('error', (event) => {
    if (event.target !== window) {
      console.warn('Erro ao carregar recurso:', event.target)
    }
  }, true)

  // Log de informaÃ§Ãµes Ãºteis para debug
  console.log('ğŸ”§ Sistema de tratamento de erros ativado')
}

// FunÃ§Ã£o para limpar listeners quando necessÃ¡rio
export function cleanupGlobalErrorHandling() {
  // Em uma aplicaÃ§Ã£o real, vocÃª removeria os event listeners aqui
  console.log('ğŸ§¹ Limpeza do sistema de tratamento de erros')
}

// FunÃ§Ã£o para reportar erros manualmente
export function reportError(error: Error, context?: string) {
  console.error(`Erro reportado${context ? ` em ${context}` : ''}:`, error)
  
  // Aqui vocÃª pode implementar o envio para um serviÃ§o de monitoramento
  // Exemplo: Sentry.captureException(error)
}
